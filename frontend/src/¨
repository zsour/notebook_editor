import { useEffect, useState } from "react";
import "./components/style/home.css";

import { useEditorMediator } from "./components/EditorMediator";

function Home() {
  const em = useEditorMediator();
  const [postsFetched, setPostFetched] = useState(false);
  const [loading, setLoading] = useState(true);
  const [parentLookup, setParentLookup] = useState({});

  let [categories, setCategories] = useState([]);

  useEffect(() => {
    if (em) {
      em.getCategories()
        .then((data) => {
          data.sort((a, b) => {
            if (a.name > b.name) {
              return 1;
            }

            return -1;
          });
          let lookup = {};
          for (let i = 0; i < data.length; i++) {
            data[i].extended = false;
            data[i].posts = [];
            lookup[data[i].ID] = i;
          }

          setParentLookup({ ...lookup });
          setCategories([...data]);
        })
        .catch((err) => {
          setLoading(false);
          console.log(err);
        });
    }
  }, [em]);

  useEffect(() => {
    if (categories.length > 0 && !postsFetched && em) {
      setLoading(true);
      em.getPosts()
        .then((data) => {
          setPostFetched(true);
          data.sort((a, b) => {
            if (a.title > b.title) {
              return 1;
            }

            return -1;
          });

          let tmp = [...categories];

          for (let i = 0; i < data.length; i++) {
            tmp[parentLookup[data[i].parent]].posts.push(data[i]);
          }

          setCategories([...tmp]);
          setLoading(false);
        })
        .catch((err) => {
          console.log(err);
          setLoading(false);
        });
    }
  }, [categories, postsFetched, em, parentLookup]);

  function setExtended(index, value) {
    let tmp = [...categories];
    tmp[index].extended = value;
    setCategories([...tmp]);
  }

  function renderCategories() {
    let jsx = [];
    for (let i = 0; i < categories.length; i++) {
      jsx.push(
        <div
          key={`category_${i}`}
          className="category"
          style={{
            height: categories[i].extended ? "400px" : "30px",
          }}
        >
          <div className="categoryHeader">
            <p className="categoryTitle">{categories[i].name}</p>
            <span
              className="categoryExtendButton"
              onClick={() => {
                setExtended(i, !categories[i].extended);
              }}
              style={{
                transform: categories[i].extended
                  ? "translateY(-50%) rotate(90deg)"
                  : "translateY(-50%)",
              }}
            ></span>

            <span className="categoryRemoveButton"></span>
          </div>

          <div className="categoryPostContainer">
            <div className="categoryPost">
              <p className="categoryPostTitle">Depth first search</p>
              <span className="categoryPostRemoveButton"></span>
              <span className="categoryPostEditButton"></span>
            </div>
          </div>
        </div>,
      );
    }

    return jsx;
  }

  function renderPage() {
    if (loading) {
      return (
        <div className="categoryContainer">
          <div className="loading">
            <p>Loading...</p>
          </div>
        </div>
      );
    }

    return <div className="categoryContainer">{renderCategories()}</div>;
  }

  return {renderPage()};
}

export default Home;
